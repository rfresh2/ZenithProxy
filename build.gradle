import groovy.json.JsonSlurper
import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.file.Files

buildscript {
    repositories {
        maven {
            name = "Gradle"
            url = "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'nu.studer.jooq' version '8.2.1'
    id "com.github.johnrengelman.shadow" version "8.1.0"
}

apply plugin: "java"

group "com.zenith"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = targetCompatibility = "20"
    options.encoding = "UTF-8"
    options.deprecation(true)
}

tasks.register('writeVersion') {
    group 'build'
    description 'Write version to file'

    doLast {
        var ver = 'git rev-parse --short HEAD'.execute().text.trim()
        if (ver.length() > 5) {
            var f = file(project.buildDir.absolutePath + '/resources/main/proxy_version.txt')
            f.parentFile.mkdirs()
            println "Writing version: " + ver
            f.write(ver)
        } else {
            println "Unable to determine full version"
        }
    }
    outputs.upToDateWhen { false }
}

processResources.finalizedBy writeVersion

repositories {
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    maven {
        name = "maven central"
        url = "https://repo1.maven.org/maven2/"
    }
    maven {
        name = "DaPorkchop_"
        url = "https://maven.daporkchop.net/"
    }
    maven {
        name = "litarvan"
        url = "https://litarvan.github.io/maven"
    }
    maven {
        name = "minecraft"
        url "https://libraries.minecraft.net"
    }
    maven {
        "opencollab-release"
        url "https://repo.opencollab.dev/maven-releases/"
    }
    maven {
        name = "paper"
        url "https://papermc.io/repo/repository/maven-public/"
    }
    mavenLocal()
}

sourceSets {
    main {
        resources {
            srcDirs("data/")
        }
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

ext {
    lombokVersion = "1.18.28"
    porklibVersion = "0.5.8-SNAPSHOT"
    postgresVersion = '42.6.0'
    nettyVersion = '4.1.94.Final'
    jooqVersion = "3.18.5"
}

jooq {
    version = project.ext.jooqVersion
    // read from config.json (will fail if config doesn't exist)
    def dbUrl = ''
    def dbUser = ''
    def dbPass = ''
    try {
        def inputFile = new File(projectDir.getAbsolutePath() + "/config.json")
        def jsonFile = new JsonSlurper().parseText(inputFile.text)
        dbUrl = 'jdbc:postgresql://' + jsonFile.database.host + ':' + jsonFile.database.port + '/postgres'
        dbUser = jsonFile.database.username
        dbPass = jsonFile.database.password
    } catch (Exception ex) {
        // fall through
        println("config.json does not exist, unable to set database credentials. generateJooq will fail if run.")
    }

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = false  // disable auto-execution in build task

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = dbUrl
                    user = dbUser
                    password = dbPass
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        routines = false
                    }
                    target {
                        packageName = 'com.zenith.database.dto'
                        // you need to manually move these generated files into main src set
                        // only needs to be done on db schema changes
                        directory = 'build/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

dependencies {
    jooqGenerator "org.postgresql:postgresql:$postgresVersion"
    shade "org.jooq:jooq:$jooqVersion"
    shade "com.zaxxer:HikariCP:5.0.1"
    shade "org.postgresql:postgresql:$postgresVersion"
    shade 'org.eclipse.jgit:org.eclipse.jgit:6.5.0.202303070854-r'
    shade 'org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:6.6.0.202305301015-r'
    shade 'com.github.mwiede:jsch:0.2.9'
    shade 'com.google.guava:guava:32.0.0-jre'
    shade "org.apache.commons:commons-math3:3.6.1"
    shade "org.apache.commons:commons-collections4:4.4"
    shade "net.daporkchop.lib:hash:$porklibVersion"
    shade "net.daporkchop.lib:minecraft-text:$porklibVersion"
    shade "ch.qos.logback:logback-classic:1.4.8"
    shade 'org.slf4j:slf4j-api:2.0.7'
    shade 'org.fusesource.jansi:jansi:2.4.0'
    shade 'com.mojang:brigadier:1.0.18'
    shade 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
    shade 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'

    shade("com.github.rfresh2:MCProtocolLib:a9bf5e045c") {
        exclude group: 'io.netty.incubator'
        exclude group: 'io.netty'
    }
    shade("com.discord4j:discord4j-core:3.3.0-M2") {
        exclude group: 'io.netty'
    }

    shade "com.github.rfresh2:MCAuthLib:0de5befe37"

    shade "io.netty:netty-codec-haproxy:$nettyVersion"
    shade "io.netty:netty-codec-dns:$nettyVersion"
    shade "io.netty:netty-codec-http2:$nettyVersion"
    shade "io.netty:netty-codec-http:$nettyVersion"
    shade "io.netty:netty-codec-socks:$nettyVersion"
    shade "io.netty:netty-handler-proxy:$nettyVersion"
    shade "io.netty:netty-handler:$nettyVersion"
    shade "io.netty:netty-resolver-dns:$nettyVersion"
    shade "io.netty:netty-transport-classes-epoll:$nettyVersion"
    shade "io.netty:netty-transport-native-epoll:$nettyVersion:linux-x86_64"
    shade "io.netty:netty-transport-native-unix-common:$nettyVersion:linux-x86_64"
    shade "io.netty:netty-resolver-dns-native-macos:$nettyVersion:osx-aarch_64"
//    shade 'io.netty.incubator:netty-incubator-transport-native-io_uring:0.0.21.Final:linux-x86_64'

    shade "com.github.collarmc:pounce:0e8492b68e"
    shade('org.redisson:redisson:3.22.1') {
        exclude group: 'io.netty'
    }
    shade 'com.nukkitx.fastutil:fastutil-object-object-maps:8.5.3'
    shade 'com.nukkitx.fastutil:fastutil-int-object-maps:8.5.3'
    shade 'com.nukkitx.fastutil:fastutil-object-int-maps:8.5.3'
    shade 'com.nukkitx.fastutil:fastutil-long-object-maps:8.5.3'

    shade 'org.jline:jline:3.23.0'
    shade 'org.jline:jline-terminal-jansi:3.23.0'
    testImplementation "org.junit.jupiter:junit-jupiter:5.9.3"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

test {
    useJUnitPlatform()
}

tasks.register('run', JavaExec) {
    group = "run"
    description = "Execute proxy"
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("com.zenith.Proxy")
    jvmArgs = ["-server",
               "-XX:MaxRAMPercentage=30", "-XX:MinRAMPercentage=30", // optimizing these for 3 instances per machine with varying amounts of ram
               // base
               "-XX:+UnlockExperimentalVMOptions", "-XX:+UnlockDiagnosticVMOptions", "-XX:+AlwaysActAsServerClassMachine",
               "-XX:+AlwaysPreTouch", "-XX:+DisableExplicitGC", "-XX:+UseNUMA", "-XX:NmethodSweepActivity=1",
               "-XX:+UseVectorCmov", "-XX:+PerfDisableSharedMem", "-XX:+UseFastUnorderedTimeStamps",
               "-XX:+UseCriticalJavaThreadPriority", "-XX:ThreadPriorityPolicy=1", "-XX:AllocatePrefetchStyle=3",
               // memory
               "-XX:+UseG1GC", "-XX:MaxGCPauseMillis=37", "-XX:+PerfDisableSharedMem", "-XX:G1HeapRegionSize=16M",
               "-XX:G1NewSizePercent=23", "-XX:G1ReservePercent=20", "-XX:SurvivorRatio=16",
               "-XX:G1MixedGCCountTarget=3", "-XX:G1HeapWastePercent=20", "-XX:InitiatingHeapOccupancyPercent=10",
               "-XX:G1RSetUpdatingPauseTimePercent=0", "-XX:MaxTenuringThreshold=1", "-XX:G1SATBBufferEnqueueingThresholdPercent=30",
               "-XX:G1ConcMarkStepDurationMillis=5.0", "-XX:G1ConcRSHotCardLimit=16",
               "-XX:GCTimeRatio=99",
               "-Djdk.virtualThreadScheduler.parallelism=4", "-Djava.util.concurrent.ForkJoinPool.common.parallelism=16"]
}

tasks.register('java_path') {
    group = "run"
    doLast {
        RegularFile execPath = javaToolchains.launcherFor(java.toolchain).get().getExecutablePath()
        // create a file symlinked to the java executable for use in scripts
        project.buildDir.mkdirs()
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            File f = file(project.buildDir.toString() + "/java_toolchain.bat")
            if (f.exists()) {
                f.delete()
            }
            f.write("@" + execPath.asFile.toString() + " %*")
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            File f = file(project.buildDir.toString() + "/java_toolchain")
            if (f.exists()) {
                f.delete()
            }
            Files.createSymbolicLink(f.toPath(), execPath.asFile.toPath())
        }
    }
}

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

//disable regular unshaded jar
jar.enabled = false

tasks.register('sourceJar', Jar) {
    from sourceSets.main.allSource
}

shadowJar {
    archiveBaseName.set(project.name)
    archiveClassifier.set('')
    archiveVersion.set('')

    configurations = [project.configurations.shade]

    exclude 'module-info.class'

    manifest {
        attributes "Implementation-Title": "Proxy",
                "Implementation-Version": project.version,
                "Main-Class": "com.zenith.Proxy"
    }
}

tasks.register('clearJooqBuild') {
    // clear any jooq generated classes in the build directory
    // we already have these classes in our src
    // can't configure jooq generator to not auto-add these generated dirs to gradle source sets
    group = "build"
    // this can be removed after all instances get updated to this commit at least once
    new File('build/generated-src').deleteDir()
    new File('build/jooq').deleteDir()
}

compileJava.dependsOn([clearJooqBuild])
tasks.named('generateJooq').configure { allInputsDeclared = false }
tasks.register('jarBuild') {
    group = "build"
}
jarBuild.dependsOn([shadowJar, build, java_path])

//build.dependsOn(shadowJar)
