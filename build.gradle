import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.file.Files

buildscript {
    repositories {
        maven {
            name = "Gradle"
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://jitpack.io'
        }
    }
}

plugins {
    id 'java'
    id 'org.graalvm.buildtools.native' version '0.9.28'
    // todo: use non-jitpack'd version when https://github.com/johnrengelman/shadow/pull/879 is merged
    id 'io.github.goooler.shadow' version '8.1.3'
}

group "com.zenith"
version = "1.0.0"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.deprecation(true)
}

tasks.register('writeCommitHash') {
    group 'build'
    description 'Write commit hash / version to file'

    doLast {
        var ver = 'git rev-parse --short=8 HEAD'.execute().text.trim()
        if (ver.length() > 5) {
            var f = file(layout.buildDirectory.getAsFile().get().absolutePath + '/resources/main/proxy_commit.txt')
            f.parentFile.mkdirs()
            println "Writing commit hash: " + ver
            f.write(ver)
        } else {
            println "Unable to determine commit hash"
        }
    }
    outputs.upToDateWhen { false }
}

processResources.finalizedBy writeCommitHash

repositories {
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    maven {
        name = "maven central"
        url = "https://repo1.maven.org/maven2/"
    }
    maven {
        name = "litarvan"
        url = "https://litarvan.github.io/maven"
    }
    maven {
        name = "minecraft"
        url "https://libraries.minecraft.net"
    }
    maven {
        "opencollab-release"
        url "https://repo.opencollab.dev/maven-releases/"
    }
    maven {
        "opencollab-snapshot"
        url "https://repo.opencollab.dev/maven-snapshots/"
    }
    maven {
        name = "paper"
        url "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "minebench"
        url = "https://repo.minebench.de/"
    }
    maven {
        "ViaVersion"
        url "https://repo.viaversion.com"
    }
    maven {
        "Lenni0451"
        url "https://maven.lenni0451.net/releases"
    }
    mavenLocal()
}

configurations {
    shade
    implementation.extendsFrom shade
}

ext {
    lombokVersion = "1.18.30"
    postgresVersion = '42.7.1'
    nettyVersion = '4.1.106.Final'
    fastutilVersion = "8.5.13-SNAPSHOT"
    jdbiVersion = "3.43.0"
}

dependencies {
    shade "org.jdbi:jdbi3-core:$jdbiVersion"
    shade "org.jdbi:jdbi3-postgres:$jdbiVersion"
    shade "com.zaxxer:HikariCP:5.1.0"
    shade "org.postgresql:postgresql:$postgresVersion"
    shade 'org.eclipse.jgit:org.eclipse.jgit:6.8.0.202311291450-r'
    shade 'org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:6.8.0.202311291450-r'
    shade 'com.github.mwiede:jsch:0.2.16'
    shade 'com.google.guava:guava:33.0.0-jre'
    shade "org.apache.commons:commons-math3:3.6.1"
    shade "org.apache.commons:commons-collections4:4.4"
    shade "ch.qos.logback:logback-classic:1.4.14"
    shade 'org.slf4j:slf4j-api:2.0.11'
    shade 'org.slf4j:jul-to-slf4j:2.0.11'
    shade 'com.mojang:brigadier:1.2.9'
    shade 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'
    shade 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
    shade 'com.github.rfresh2:SimpleEventBus:1.0'
    shade("com.github.rfresh2.Discord4j:discord4j-core:dc7bc81bc1") {
        exclude group: 'io.netty'
    }
    shade("com.github.rfresh2:MCProtocolLib:170838beb9") {
        exclude group: 'io.netty.incubator'
        exclude group: 'io.netty'
        exclude group: 'com.microsoft.azure'
        exclude group: 'fr.litarvan'
    }
    shade "net.raphimc:MinecraftAuth:4.0.0"
    shade "io.netty:netty-codec-haproxy:$nettyVersion"
    shade "io.netty:netty-codec-dns:$nettyVersion"
    shade "io.netty:netty-codec-http2:$nettyVersion"
    shade "io.netty:netty-codec-http:$nettyVersion"
    shade "io.netty:netty-codec-socks:$nettyVersion"
    shade "io.netty:netty-handler-proxy:$nettyVersion"
    shade "io.netty:netty-handler:$nettyVersion"
    shade "io.netty:netty-resolver-dns:$nettyVersion"
    shade "io.netty:netty-transport-classes-epoll:$nettyVersion"
    shade "io.netty:netty-transport-native-epoll:$nettyVersion:linux-x86_64"
    shade "io.netty:netty-transport-native-unix-common:$nettyVersion:linux-x86_64"
    shade "io.netty:netty-resolver-dns-native-macos:$nettyVersion:osx-aarch_64"
    // uncomment to use io_uring
//    shade 'io.netty.incubator:netty-incubator-transport-native-io_uring:0.0.21.Final:linux-x86_64'
    shade "de.themoep:minedown-adventure:1.7.2-SNAPSHOT"
    shade "org.cloudburstmc.math:api:2.0"
    shade "org.cloudburstmc.math:immutable:2.0"

    shade('org.redisson:redisson:3.26.0') {
        exclude group: 'io.netty'
    }
    shade "org.cloudburstmc.fastutil.maps:object-object-maps:$fastutilVersion"
    shade "org.cloudburstmc.fastutil.maps:int-object-maps:$fastutilVersion"
    shade "org.cloudburstmc.fastutil.maps:object-int-maps:$fastutilVersion"
    shade "org.cloudburstmc.fastutil.maps:long-object-maps:$fastutilVersion"
    shade "org.cloudburstmc.fastutil.maps:int-int-maps:$fastutilVersion"
    shade "org.cloudburstmc.fastutil.maps:reference-object-maps:$fastutilVersion"

    shade "net.raphimc:ViaLoader:2.2.12"
    shade "com.viaversion:viaversion:4.9.3-SNAPSHOT"
    shade "com.viaversion:viabackwards:4.9.2-SNAPSHOT"

    shade 'org.jline:jline:3.25.0'
    shade 'org.jline:jline-terminal-jansi:3.25.0'
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.1"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

test {
    useJUnitPlatform()
}

tasks.register('run', JavaExec) {
    group = "run"
    description = "Execute proxy"
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("com.zenith.Proxy")
    jvmArgs = ["-Xmx300m", "-XX:+UseG1GC", "-Dio.netty.allocator.maxOrder=9", "-Dio.netty.eventLoopThreads=1",
               "-Djava.util.concurrent.ForkJoinPool.common.parallelism=2", "-Dio.netty.leakDetection.level=disabled"]
}

tasks.register('java_path') {
    group = "run"
    doLast {
        RegularFile execPath = javaToolchains.launcherFor(java.toolchain).get().getExecutablePath()
        // create a file symlinked to the java executable for use in scripts
        layout.buildDirectory.getAsFile().get().mkdirs()
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            File f = file(layout.buildDirectory.getAsFile().get().toString() + "/java_toolchain.bat")
            if (f.exists()) {
                f.delete()
            }
            f.write("@" + execPath.asFile.toString() + " %*")
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            File f = file(layout.buildDirectory.getAsFile().get().toString() + "/java_toolchain")
            if (f.exists()) {
                f.delete()
            }
            Files.createSymbolicLink(f.toPath(), execPath.asFile.toPath())
        }
    }
}

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

jar {
    enabled = false
}

tasks.register('sourceJar', Jar) {
    from sourceSets.main.allSource
}

shadowJar {
    from collectReachabilityMetadata
    archiveBaseName.set(project.name)
    archiveClassifier.set('')
    archiveVersion.set('')

    configurations = [project.configurations.shade]

    exclude 'module-info.class', 'META-INF/licenses/**', 'META-INF/maven/**', 'META-INF/proguard/**',
            'META-INF/gradle/**', 'META-INF/versions/**', 'META-INF/native-image/io.netty/**/native-image.properties' ,
            // todo: remove when jline 3.25.1 released https://github.com/jline/jline3/issues/923
            'META-INF/native-image/jansi/native-image.properties',
            "about.html", "bungee.yml", "plugin.yml", "velocity-plugin.json", "fabric.mod.json", "OSGI-INF/**"
    minimize {
        exclude(dependency("org.slf4j:slf4j-api:.*"))
        exclude(dependency("ch.qos.logback:.*:.*"))
        exclude(dependency("org.jline:jline:.*"))
        exclude(dependency("org.jline:jline-terminal-jansi:.*"))
        exclude(dependency("org.jline:jline-native:.*"))
        exclude(dependency("org.jline:jline-terminal:.*"))
        exclude(dependency("org.fusesource.jansi:jansi:.*"))
        exclude(dependency("com.github.mwiede:jsch:.*"))
        exclude(dependency("org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:.*"))
        exclude(dependency("com.github.rfresh2.Discord4j:discord4j-core:.*"))
        exclude(dependency("com.github.ben-manes.caffeine:caffeine:.*"))
        exclude(dependency("org.postgresql:postgresql:.*"))
        exclude(dependency("io.netty:netty-codec-http:.*"))
        exclude(dependency("io.netty:netty-codec-http2:.*"))
        exclude(dependency("io.netty:netty-resolver-dns:.*"))
        exclude(dependency("org.cloudburstmc.math:api:.*"))
        exclude(dependency("org.cloudburstmc.math:immutable:.*"))
        exclude(dependency("io.jsonwebtoken:jjwt-api:.*"))
        exclude(dependency("io.jsonwebtoken:jjwt-gson:.*"))
        exclude(dependency("io.jsonwebtoken:jjwt-impl:.*"))
    }
    manifest {
        attributes "Implementation-Title": "ZenithProxy",
                "Implementation-Version": project.version,
                "Main-Class": "com.zenith.Proxy"
    }
}

tasks.named("nativeCompile") {
    classpathJar = shadowJar.archiveFile
}

graalvmNative {
    binaries {
        main {
            javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
            imageName = "ZenithProxy"
            mainClass = "com.zenith.Proxy"
//            quickBuild = true
            verbose = true
            buildArgs.addAll(
                    "-Duser.country=US",
                    "-Duser.language=en",
                    "--enable-url-protocols=https,http",
                    "--report-unsupported-elements-at-runtime",
                    "-H:+ReportExceptionStackTraces",
                    "-H:DeadlockWatchdogInterval=30",
                    "-H:IncludeLocales=en",
                    "-R:MaxHeapSize=200m",
                    "-march=x86-64-v3",
                    "--gc=serial",
                    "-J-XX:MaxRAMPercentage=90",
            )
            var pgoPath = System.getenv("GRAALVM_PGO_PATH")
            if (pgoPath != null) {
                println("Using PGO profile: $pgoPath")
                buildArgs.add("--pgo=$pgoPath")
            } else {
                var pgoInstrument = System.getenv("GRAALVM_PGO_INSTRUMENT")
                if (pgoInstrument != null) {
                    println("Instrumenting PGO")
                    buildArgs.add("--pgo-instrument")
                }
            }
            configurationFileDirectories.from(file("src/main/resources/META-INF/native-image"))
        }
    }
    metadataRepository {
        enabled = true
    }
}

tasks.register('jarBuild') {
    group = "build"
}
jarBuild.dependsOn([shadowJar, build, java_path])
nativeCompile.dependsOn(jarBuild)
generateResourcesConfigFile.dependsOn(shadowJar)

//build.dependsOn(shadowJar)
