import groovy.json.JsonSlurper
import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.file.Files

buildscript {
    repositories {
        maven {
            name = "Gradle"
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://jitpack.io'
        }
    }
    // todo: use non-jitpack'd version when https://github.com/johnrengelman/shadow/pull/879 is merged
    dependencies {
        classpath "com.github.rfresh2:shadow:3d1505e480"
    }
}

plugins {
    id 'nu.studer.jooq' version '8.2.1'
    id 'java'
    id 'org.graalvm.buildtools.native' version '0.9.27'
}

apply plugin: "com.github.johnrengelman.shadow"
group "com.zenith"
version = "1.0.0"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.deprecation(true)
}

tasks.register('writeCommitHash') {
    group 'build'
    description 'Write commit hash / version to file'

    doLast {
        var ver = 'git rev-parse --short=8 HEAD'.execute().text.trim()
        if (ver.length() > 5) {
            var f = file(layout.buildDirectory.getAsFile().get().absolutePath + '/resources/main/proxy_commit.txt')
            f.parentFile.mkdirs()
            println "Writing commit hash: " + ver
            f.write(ver)
        } else {
            println "Unable to determine commit hash"
        }
    }
    outputs.upToDateWhen { false }
}

processResources.finalizedBy writeCommitHash

repositories {
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    maven {
        name = "maven central"
        url = "https://repo1.maven.org/maven2/"
    }
    maven {
        name = "DaPorkchop_"
        url = "https://maven.daporkchop.net/"
    }
    maven {
        name = "litarvan"
        url = "https://litarvan.github.io/maven"
    }
    maven {
        name = "minecraft"
        url "https://libraries.minecraft.net"
    }
    maven {
        "opencollab-release"
        url "https://repo.opencollab.dev/maven-releases/"
    }
    maven {
        name = "paper"
        url "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "minebench"
        url = "https://repo.minebench.de/"
    }
    maven {
        "ViaVersion"
        url "https://repo.viaversion.com"
    }
    mavenLocal()
}

sourceSets {
    main {
        resources {
            srcDirs("data/")
        }
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

ext {
    lombokVersion = "1.18.30"
    porklibVersion = "0.5.8-SNAPSHOT"
    postgresVersion = '42.6.0'
    nettyVersion = '4.1.100.Final'
    jooqVersion = "3.18.7"
}

jooq {
    version = project.ext.jooqVersion
    // read from config.json (will fail if config doesn't exist)
    def dbUrl = ''
    def dbUser = ''
    def dbPass = ''
    try {
        def inputFile = new File(projectDir.getAbsolutePath() + "/config.json")
        def jsonFile = new JsonSlurper().parseText(inputFile.text)
        dbUrl = 'jdbc:postgresql://' + jsonFile.database.host + ':' + jsonFile.database.port + '/postgres'
        dbUser = jsonFile.database.username
        dbPass = jsonFile.database.password
    } catch (Exception ex) {
        // fall through
        println("config.json does not exist, unable to set database credentials. generateJooq will fail if run.")
    }

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = false  // disable auto-execution in build task

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = dbUrl
                    user = dbUser
                    password = dbPass
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        routines = false
                    }
                    target {
                        packageName = 'com.zenith.database.dto'
                        // you need to manually move these generated files into main src set
                        // only needs to be done on db schema changes
                        directory = 'build/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

dependencies {
    jooqGenerator "org.postgresql:postgresql:$postgresVersion"
    shade "org.jooq:jooq:$jooqVersion"
    shade "com.zaxxer:HikariCP:5.0.1"
    shade "org.postgresql:postgresql:$postgresVersion"
    shade 'org.eclipse.jgit:org.eclipse.jgit:6.7.0.202309050840-r'
    shade 'org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:6.7.0.202309050840-r'
    shade 'com.github.mwiede:jsch:0.2.11'
    shade 'com.google.guava:guava:32.1.2-jre'
    shade "org.apache.commons:commons-math3:3.6.1"
    shade "org.apache.commons:commons-collections4:4.4"
    shade ("net.daporkchop.lib:math:$porklibVersion") {
        exclude group: 'net.daporkchop.lib', module: 'common'
        exclude group: 'net.daporkchop.lib', module: 'unsafe'
    }
    shade "ch.qos.logback:logback-classic:1.4.11"
    shade 'org.slf4j:slf4j-api:2.0.9'
    shade 'org.slf4j:jul-to-slf4j:2.0.9'
    shade 'org.fusesource.jansi:jansi:2.4.0'
    shade 'com.mojang:brigadier:1.1.8'
    shade 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
    shade 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
    // todo: replace when https://github.com/Discord4J/Discord4J/pull/1164 is merged
    //    shade("com.discord4j:discord4j-core:3.3.0-SNAPSHOT") {
    shade("com.github.rfresh2.Discord4j:discord4j-core:18ccb50958") {
        exclude group: 'io.netty'
    }
    shade("com.github.rfresh2:MCProtocolLib:8025978ed0") {
        exclude group: 'io.netty.incubator'
        exclude group: 'io.netty'
    }
    shade "io.netty:netty-codec-haproxy:$nettyVersion"
    shade "io.netty:netty-codec-dns:$nettyVersion"
    shade "io.netty:netty-codec-http2:$nettyVersion"
    shade "io.netty:netty-codec-http:$nettyVersion"
    shade "io.netty:netty-codec-socks:$nettyVersion"
    shade "io.netty:netty-handler-proxy:$nettyVersion"
    shade "io.netty:netty-handler:$nettyVersion"
    shade "io.netty:netty-resolver-dns:$nettyVersion"
    shade "io.netty:netty-transport-classes-epoll:$nettyVersion"
    shade "io.netty:netty-transport-native-epoll:$nettyVersion:linux-x86_64"
    shade "io.netty:netty-transport-native-unix-common:$nettyVersion:linux-x86_64"
    shade "io.netty:netty-resolver-dns-native-macos:$nettyVersion:osx-aarch_64"
    // uncomment to use io_uring
//    shade 'io.netty.incubator:netty-incubator-transport-native-io_uring:0.0.21.Final:linux-x86_64'
    shade "de.themoep:minedown-adventure:1.7.2-SNAPSHOT"
    shade "net.kyori:adventure-text-serializer-gson:4.14.0"
    shade "net.kyori:adventure-text-serializer-gson-legacy-impl:4.14.0"
    shade "net.kyori:adventure-text-serializer-legacy:4.14.0"
    shade "net.kyori:adventure-text-serializer-ansi:4.14.0"
    shade "org.cloudburstmc.math:api:2.0"
    shade "org.cloudburstmc.math:immutable:2.0"

    shade('org.redisson:redisson:3.23.5') {
        exclude group: 'io.netty'
    }
    shade 'com.nukkitx.fastutil:fastutil-object-object-maps:8.5.3'
    shade 'com.nukkitx.fastutil:fastutil-int-object-maps:8.5.3'
    shade 'com.nukkitx.fastutil:fastutil-object-int-maps:8.5.3'
    shade 'com.nukkitx.fastutil:fastutil-long-object-maps:8.5.3'
    shade 'com.nukkitx.fastutil:fastutil-int-int-maps:8.5.3'

    shade "com.viaversion:viaversion:4.8.1"
    shade "com.viaversion:viabackwards:4.8.1"

    shade 'org.jline:jline:3.23.0'
    shade 'org.jline:jline-terminal-jansi:3.23.0'
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.0"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

test {
    useJUnitPlatform()
}

tasks.register('run', JavaExec) {
    group = "run"
    description = "Execute proxy"
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("com.zenith.Proxy")
    jvmArgs = ["-Xmx300m", "-XX:+UseG1GC", "-Dio.netty.allocator.maxOrder=9", "-Dio.netty.eventLoopThreads=2",
               "-Djava.util.concurrent.ForkJoinPool.common.parallelism=2", "-Dio.netty.leakDetection.level=disabled"]
}

tasks.register('java_path') {
    group = "run"
    doLast {
        RegularFile execPath = javaToolchains.launcherFor(java.toolchain).get().getExecutablePath()
        // create a file symlinked to the java executable for use in scripts
        layout.buildDirectory.getAsFile().get().mkdirs()
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            File f = file(layout.buildDirectory.getAsFile().get().toString() + "/java_toolchain.bat")
            if (f.exists()) {
                f.delete()
            }
            f.write("@" + execPath.asFile.toString() + " %*")
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            File f = file(layout.buildDirectory.getAsFile().get().toString() + "/java_toolchain")
            if (f.exists()) {
                f.delete()
            }
            Files.createSymbolicLink(f.toPath(), execPath.asFile.toPath())
        }
    }
}

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

jar {
    enabled = false
}

tasks.register('sourceJar', Jar) {
    from sourceSets.main.allSource
}

shadowJar {
    archiveBaseName.set(project.name)
    archiveClassifier.set('')
    archiveVersion.set('')

    configurations = [project.configurations.shade]

    exclude 'module-info.class'
    exclude 'META-INF/licenses/**'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/proguard/**'
    exclude 'META-INF/gradle/**'
    exclude 'META-INF/versions/**'
    minimize {
        exclude(dependency("org.slf4j:slf4j-api:.*"))
        exclude(dependency("ch.qos.logback:.*:.*"))
        exclude(dependency("org.jline:jline:.*"))
        exclude(dependency("org.jline:jline-terminal-jansi:.*"))
        exclude(dependency("com.github.mwiede:jsch:.*"))
        exclude(dependency("org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:.*"))
        exclude(dependency("com.github.rfresh2.Discord4j:discord4j-core:.*"))
        exclude(dependency("org.postgresql:postgresql:.*"))
        exclude(dependency("io.netty:netty-codec-http:.*"))
        exclude(dependency("io.netty:netty-codec-http2:.*"))
        exclude(dependency("io.netty:netty-resolver-dns:.*"))
        exclude(dependency("org.cloudburstmc.math:api:.*"))
        exclude(dependency("org.cloudburstmc.math:immutable:.*"))
    }
    manifest {
        attributes "Implementation-Title": "ZenithProxy",
                "Implementation-Version": project.version,
                "Main-Class": "com.zenith.Proxy"
    }
}

tasks.register('clearJooqBuild') {
    // clear any jooq generated classes in the build directory
    // we already have these classes in our src
    // can't configure jooq generator to not auto-add these generated dirs to gradle source sets
    group = "build"
    new File('build/jooq').deleteDir()
}

tasks.named("nativeCompile") {
    classpathJar = shadowJar.archiveFile
}

graalvmNative {
    binaries {
        main {
            javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
            imageName = "ZenithProxy"
            mainClass = "com.zenith.Proxy"
//            quickBuild = true
            verbose = true
            buildArgs.addAll(
                    "-Duser.country=US",
                    "-Duser.language=en",
                    "--add-opens=java.base/jdk.internal.ref=ALL-UNNAMED",
                    "--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED",
                    "--add-opens=java.base/java.nio=ALL-UNNAMED",
                    "--initialize-at-build-time=net.daporkchop.lib",
                    "--initialize-at-build-time=org.jline",
                    "--initialize-at-build-time=org.fusesource.jansi",
                    "--initialize-at-build-time=com.google.gson",
                    '--initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback',
                    '--initialize-at-build-time=org.slf4j.MDC',
                    '--initialize-at-build-time=ch.qos.logback.classic.Level',
                    '--initialize-at-build-time=ch.qos.logback.classic.Logger',
                    '--initialize-at-build-time=ch.qos.logback.core.util.StatusPrinter',
                    '--initialize-at-build-time=ch.qos.logback.core.status.StatusBase',
                    '--initialize-at-build-time=ch.qos.logback.core.status.InfoStatus',
                    '--initialize-at-build-time=ch.qos.logback.core.spi.AppenderAttachableImpl',
                    '--initialize-at-build-time=org.slf4j.LoggerFactory',
                    '--initialize-at-build-time=ch.qos.logback.core.util.Loader',
                    '--initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder',
                    '--initialize-at-build-time=ch.qos.logback.classic.spi.ThrowableProxy',
                    '--initialize-at-build-time=ch.qos.logback.core.CoreConstants',
                    "--initialize-at-build-time=org.jooq",
                    "--initialize-at-build-time=com.fasterxml",
                    "--initialize-at-build-time=org.yaml",
                    "--initialize-at-build-time=org.redisson",
                    "--initialize-at-build-time=com.zaxxer",
                    "--initialize-at-run-time=org.redisson.codec.JsonJacksonCodec",
                    "--initialize-at-build-time=com.github",
                    "--initialize-at-build-time=com.zenith.command",
                    "--initialize-at-build-time=com.zenith.network",
                    "--initialize-at-build-time=com.zenith.database",
                    "--initialize-at-build-time=com.zenith.discord",
                    "--initialize-at-build-time=com.zenith.event",
                    "--initialize-at-build-time=com.zenith.cache",
                    "--initialize-at-build-time=com.zenith.feature.spectator",
                    "--initialize-at-run-time=com.zenith.module",
                    "--initialize-at-run-time=com.zenith.feature.autoupdater",
                    "--initialize-at-build-time=com.google",
                    "--initialize-at-build-time=com.collarmc",
                    "--initialize-at-build-time=reactor",
                    "--initialize-at-build-time=com.microsoft",
                    "--initialize-at-build-time=com.nimbusds",
                    "--initialize-at-build-time=com.mojang",
                    "--initialize-at-build-time=com.googlecode",
                    "--initialize-at-build-time=net.kyori",
                    "--initialize-at-run-time=sun.text.resources.cldr",
                    "--initialize-at-run-time=reactor.netty.http.client.HttpClientFormEncoder",
                    "--initialize-at-run-time=reactor.netty.resources.DefaultLoopNativeDetector",
                    "--initialize-at-run-time=reactor.netty.resources.DefaultLoopEpoll",
                    "--initialize-at-run-time=reactor.netty.tcp.SslProvider",
                    "--initialize-at-run-time=reactor.netty.http.client",
                    "--initialize-at-run-time=reactor.netty.tcp.TcpClientSecure",
                    "--initialize-at-run-time=io.netty.channel.epoll.Epoll",
                    "--initialize-at-run-time=io.netty.channel.epoll.Native",
                    "--initialize-at-run-time=io.netty.channel.epoll.EpollEventLoop",
                    "--initialize-at-run-time=io.netty.channel.epoll.EpollEventArray",
                    "--initialize-at-run-time=io.netty.channel.DefaultFileRegion",
                    "--initialize-at-run-time=io.netty.channel.unix.Errors",
                    "--initialize-at-run-time=io.netty.channel.unix.IovArray",
                    "--initialize-at-run-time=io.netty.channel.unix.Limits",
                    "--initialize-at-run-time=io.netty.util.internal.logging.Slf4jLogger",
                    "--initialize-at-run-time=io.netty.channel.unix.Socket",
                    "--initialize-at-run-time=io.netty.channel.ChannelHandlerMask",
                    "--initialize-at-run-time=sun.net.dns.ResolverConfigurationImpl",
                    "--enable-url-protocols=https,http",
                    "--report-unsupported-elements-at-runtime",
                    "-H:+ReportExceptionStackTraces",
                    "-H:DeadlockWatchdogInterval=30",
                    "-H:IncludeLocales=en",
//                    "-H:DashboardDump=imageDashboardDump",
//                    "-H:+DashboardAll",
                    "--static",
                    "--libc=musl",
                    "-R:MaxHeapSize=150m",
//                    "--pgo-instrument",
                    "-march=x86-64-v3",
                    "--gc=serial",
                    "-J-XX:MaxRAMPercentage=90",
            )

            configurationFileDirectories.from(file("src/main/resources/META-INF/native-image"))
        }
    }
    metadataRepository {
        enabled = true
    }
}

compileJava.dependsOn([clearJooqBuild])
tasks.named('generateJooq').configure { allInputsDeclared = false }
tasks.register('jarBuild') {
    group = "build"
}
jarBuild.dependsOn([shadowJar, build, java_path])
nativeCompile.dependsOn(jarBuild)
generateResourcesConfigFile.dependsOn(shadowJar)

//build.dependsOn(shadowJar)
